public abstract class Appointment

{

    private String description;

    public Appointment()

    {

        description = "";

    }

    public void setDescription(String description)

    {

        this.description = description;

    }

    public abstract boolean occursOn(int year, int month, int day);

    public String toString()

    {

  return description;

    }

}

Filename: “Monthly.java”

public class Monthly extends Appointment

{

    private int day;

    public Monthly(int day, String description)

    {

        setDescription(description);

        this.day = day;

    }

    public boolean occursOn(int year, int month, int day)

    {
        return day == this.day;

    }

}

public class Onetime extends Appointment

{

    private int year;

    private int month;

    private int day;

    public Onetime(int year, int month, int day, String description)

    {

        setDescription(description);

        this.year = year;

        this.month = month;

        this.day = day;

    }

    public boolean occursOn(int year, int month, int day)

    {

        return year == this.year && month == this.month && day == this.day;

    }

}


public class Daily extends Appointment

{

    public Daily(String description)

    {

        setDescription(description);

    }

    public boolean occursOn(int year, int month, int day)

    {
        return true;

    }

}

public class AppointmentTester

{

    public static void main(String[] args)

    {

        System.out.print("Monthly is subclass of Appointment: ");

        System.out.println(Monthly.class.getSuperclass() == Appointment.class);

        System.out.println("Expected: true");

        System.out.print("Onetime is subclass of Appointment: ");

        System.out.println(Onetime.class.getSuperclass() == Appointment.class);

        System.out.println("Expected: true");

        System.out.print("Daily is subclass of Appointment: ");

        System.out.println(Daily.class.getSuperclass() == Appointment.class);

        System.out.println("Expected: true");

        System.out.print("Monthly appointments have no extra fields: ");

        System.out.println(Monthly.class.getDeclaredFields().length == 1);

        System.out.println("Expected: true");

        System.out.print("Onetime appointments have no extra fields: ");

        System.out.println(Onetime.class.getDeclaredFields().length == 3);
      System.out.println("Expected: true");

       System.out.print("Daily appointments have no extra fields: ");

        System.out.println(Daily.class.getDeclaredFields().length == 0);

        System.out.println("Expected: true");

        Appointment obj = new Monthly(15, "pay the bills");

        System.out.println("Checking Monthly appointment: " + obj);

        System.out.println("Expected: pay the bills");

        System.out.println(obj.occursOn(2016, 8, 15));

        System.out.println("Expected: true");

        obj = new Onetime(2016, 11, 1, "Dentist appointment.");

        System.out.println("Checking onetime appointment: " + obj);

        System.out.println("Expected: Dentist appointment.");

        System.out.println(obj.occursOn(2016, 11, 1));

        System.out.println("Expected: true");

        obj = new Daily("walk the dog.");

        System.out.println("Checking daily appointment: " + obj);

        System.out.println("Expected: walk the dog");

        System.out.println(obj.occursOn(2016, 12, 25));

        System.out.println("Expected: true");

    }

}
